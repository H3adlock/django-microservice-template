# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("{{ project_name }}-worker", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type': 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel': 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

# CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = changes.PBChangeSource(
    port=9999, user='{{ project_name }}', passwd='{{ project_name }}')

quick = schedulers.SingleBranchScheduler(
    name="quick",
    change_filter=util.ChangeFilter(category='quick_tests'),
    builderNames=["Run app tests"])

full = schedulers.SingleBranchScheduler(
    name="full",
    change_filter=util.ChangeFilter(category='full_rebuild'),
    builderNames=["Full rebuild"])

force = schedulers.ForceScheduler(
    name="force",
    builderNames=["Full rebuild", "Apps rebuild", "Run app tests", "Non apps rebuild"])

# full_5min = schedulers.Periodic(
#     name="full_5min",
#     builderNames=["Full rebuild 5min"],
#     periodicBuildTimer=1)

c['schedulers'] = [force, quick, full]
#c['schedulers'] = [force, quick, full, full_5min]

# BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

make_clean_all = steps.ShellCommand(name="make clean-all",
                                    command=["make", "clean-all"],
                                    description="make clean-all")

make_clean_apps = steps.ShellCommand(name="make clean-apps",
                                     command=["make", "clean-apps"],
                                     # command="pwd",
                                     description="make clean-apps")

make_clean_non_apps = steps.ShellCommand(name="make clean-non-apps",
                                         command=["make", "clean-non-apps"],
                                         description="make clean-non-apps")

make_run = steps.ShellCommand(name="make run",
                              command=["make", "run-prod"],
                              description="make run")

make_test = steps.ShellCommand(name="make test",
                               command=["make", "test"],
                               description="make test")

make_sbe_smoke = steps.ShellCommand(name="make sbe-smoke",
                                    command=["make", "sbe-smoke"],
                                    description="make sbe-smoke")

cp_source = steps.ShellCommand(name="copy source",
                               # command="ls /buildbot/src/*")
                               command="cp -R ../../src/* ./")

wait_for_postgres = steps.ShellCommand(name="wait for db",
                                       command=["make", "wait-for-postgres"])

wait_for_elk = steps.ShellCommand(name="wait for logs",
                                  command=["make", "wait-for-elk"])

upload_docs = steps.ShellCommand(name="upload docs",
                                 command=["make", "upload-docs"])

upload_static = steps.ShellCommand(name="upload static",
                                   command=["make", "upload-static"])

# sleep_5min = steps.ShellCommand(name="sleep 5min",
#                                command=["sleep", "300"])

tests_factory = util.BuildFactory()
tests_factory.addStep(cp_source)
tests_factory.addStep(make_test)
tests_factory.addStep(make_sbe_smoke)

full_build_factory = util.BuildFactory()
full_build_factory.addStep(cp_source)
full_build_factory.addStep(make_clean_all)
full_build_factory.addStep(make_run)
full_build_factory.addStep(upload_docs)
full_build_factory.addStep(upload_static)
full_build_factory.addStep(wait_for_postgres)
full_build_factory.addStep(wait_for_elk)
full_build_factory.addStep(make_test)
full_build_factory.addStep(make_sbe_smoke)

# full_build_factory_5min = util.BuildFactory()
# full_build_factory_5min.addStep(sleep_5min)
# full_build_factory_5min.addStep(cp_source)
# full_build_factory_5min.addStep(make_clean_all)
# full_build_factory_5min.addStep(make_run)
# full_build_factory_5min.addStep(upload_docs)
# full_build_factory_5min.addStep(upload_static)
# full_build_factory_5min.addStep(wait_for_postgres)
# full_build_factory_5min.addStep(wait_for_elk)
# full_build_factory_5min.addStep(make_test)
# full_build_factory_5min.addStep(make_sbe_smoke)

build_factory = util.BuildFactory()
build_factory.addStep(cp_source)
build_factory.addStep(make_clean_apps)
build_factory.addStep(make_run)
build_factory.addStep(upload_docs)
build_factory.addStep(upload_static)
build_factory.addStep(wait_for_postgres)
build_factory.addStep(make_test)
build_factory.addStep(make_sbe_smoke)

build_non_apps_factory = util.BuildFactory()
build_non_apps_factory.addStep(cp_source)
build_non_apps_factory.addStep(make_clean_non_apps)
build_non_apps_factory.addStep(make_run)
build_non_apps_factory.addStep(upload_docs)
build_non_apps_factory.addStep(upload_static)
build_non_apps_factory.addStep(wait_for_elk)
build_non_apps_factory.addStep(wait_for_postgres)
build_non_apps_factory.addStep(make_test)
build_non_apps_factory.addStep(make_sbe_smoke)

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="Full rebuild",
                       workernames=["{{ project_name }}-worker"],
                       factory=full_build_factory))
c['builders'].append(
    util.BuilderConfig(name="Apps rebuild",
                       workernames=["{{ project_name }}-worker"],
                       factory=build_factory))

c['builders'].append(
    util.BuilderConfig(name="Non apps rebuild",
                       workernames=["{{ project_name }}-worker"],
                       factory=build_non_apps_factory))

c['builders'].append(
    util.BuilderConfig(name="Run app tests",
                       workernames=["{{ project_name }}-worker"],
                       factory=tests_factory))

# c['builders'].append(
#     util.BuilderConfig(name="Full rebuild 5min",
#                        workernames=["yourservice-worker"],
#                        factory=full_build_factory_5min))

# STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

# PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "{{ project_name }}-cicd"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

# DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
