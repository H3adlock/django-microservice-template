version: '2'

services:

  logs:
      image: "{{ project_name }}-logs:1.0.1"
      container_name: {{ project_name }}-logs
      build:
        context: ./logs
        dockerfile: Dockerfile
      labels:
        application: "{{ project_name }}-logs"
      environment:
        LOGSPOUT: ignore
      ports:
        - "5601:5601"
        - "9200:9200"
        - "5000:5000"

  logs-logspout:
      image: gliderlabs/logspout:v3.1
      container_name: {{ project_name }}-logspout
      labels:
        application: "{{ project_name }}-logspout"
      depends_on:
        - logs
      links:
        - logs
      environment:
        DEBUG: "true"
        LOGSPOUT: ignore
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      command: syslog://logs:5000

  web-logs:
    image: alpine:3.7
    container_name: "{{ project_name }}-web-logs"
    labels:
      application: "{{ project_name }}-web-logs"
    volumes:
      - /opt/{{ project_name }}/logs/web
    command: /bin/true

  docs:
    container_name: "{{ project_name }}-docs"
    image: "{{ project_name }}-docs:1.0.1"
    build:
      context: ./docs
      dockerfile: Dockerfile-docs
    labels:
      application: "{{ project_name }}-docs"
    command: make html

  web:
    env_file: env
    container_name: "{{ project_name }}-web"
    image: "{{ project_name }}-web:1.0.1"
    build: 
      context: ./{{ project_name }}-web
      dockerfile: Dockerfile-web
    labels:
      application: "{{ project_name }}-web"
    volumes:
      - /opt/{{ project_name }}/static
    volumes_from:
      - web-logs
    expose:
      - "8000"
    depends_on:
      - db
      - logs
      - web-logs

  db:
    image: "{{ project_name }}-db:1.0.1"
    container_name: "{{ project_name }}-db"
    build:
      context: ./db
      dockerfile: Dockerfile-db
    labels:
      application: "{{ project_name }}-db"
    expose:
      - "5432"
    volumes_from:
      - data

  data:
    image: "{{ project_name }}-data:1.0.1"
    container_name: "{{ project_name }}-data"
    labels:
      application: "{{ project_name }}-data"
    build:
      context: ./db
      dockerfile: Dockerfile-data
    volumes:
      - /var/lib/postgresql
    command: /bin/true

  https-logs:
    image: alpine:3.7
    container_name: "{{ project_name }}-https-logs"
    labels:
      application: "{{ project_name }}-https-logs"
    volumes:
      - /opt/{{ project_name }}/logs/https
    command: /bin/true

  https:
    container_name: "{{ project_name }}-https"
    image: "{{ project_name }}-https:1.0.1"
    build:
      context: ./https
      dockerfile: Dockerfile-https
    volumes_from:
      - https-logs
    ports:
      - "80:80"
    labels:
      application: "{{ project_name }}-https"
    depends_on:
      - web
      - https-logs
    command: bash entry-point.sh

  # remove as soon as node 9.x based on alpine 3.7 is available here https://hub.docker.com/_/node/. 3.7 is the only alpine that works with chromium-headles webdrivier
  node:
    container_name: "node-alpine37"
    image: "node:9.9-alpine37"
    build:
      context: ./testing
      dockerfile: Dockerfile-node
    command: /bin/true

  testing:
    container_name: "{{ project_name }}-testing"
    image: "{{ project_name }}-testing:1.0.1"
    build:
      context: ./testing
      dockerfile: Dockerfile-testing
    links:
      - logs
    depends_on:
      - node
    command: tail -f /dev/null

  docker-console:
      image: portainer/portainer
      container_name: {{ project_name }}-docker-console
      labels:
        application: "{{ project_name }}-docker-console"
      ports:
        - "9000:9000"
      command: -H unix:///var/run/docker.sock
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - portainer_data:/data

  monitoring-agent:
      container_name: "{{ project_name }}-monitoring-agent"
      image: "{{ project_name }}-monitoring-agent:1.0.1"
      build:
        context: ./monitoring
        dockerfile: Dockerfile-glances
      ports:
        - 61208-61209:61208-61209
      restart: always
      environment:
         # OPTS for glances:v2.11.1
        GLANCES_OPT: "--export-statsd -q -t 1" #for exporting to statd standalone quite mode needs to be set
        # OPTS for glances 3
        #GLANCES_OPT: "--export statsd -q -t 1" #for exporting to statd standalone quite mode needs to be set
        #GLANCES_OPT: "-w" #for web console, no export to graphiteGLANCES_OPT: "--export-statsd -q -t 1" #for exporting to statd standalone quite mode needs to be set
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock:ro
      pid: "host"

  monitoring-server:
      image: kamon/grafana_graphite
      container_name: {{ project_name }}-monitoring-server
      labels:
        application: "{{ project_name }}-monitoring-server"
      ports:
        - 81:81 #graphite web ui / rest api
        - 88:80 #graphana web ui
        - 2003-2004:2003-2004 
        - 2023-2024:2023-2024
        - 8125:8125/udp #statsd udp receiver port
        - 8126:8126
      restart: always

volumes:
  portainer_data: