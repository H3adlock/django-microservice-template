FROM node:9.9-alpine37
# swtich to official docker image as soon as node 9.x based on alpine 3.7 is available. 3.7 is the only alpine that works with chromium-headles webdrivier

# update apk repo
RUN echo "http://dl-4.alpinelinux.org/alpine/v3.7/main" >> /etc/apk/repositories && \
    echo "http://dl-4.alpinelinux.org/alpine/v3.7/community" >> /etc/apk/repositories 

 RUN echo "http://dl-2.alpinelinux.org/alpine/edge/main" > /etc/apk/repositories  && \
     echo "http://dl-2.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories  && \
     echo "http://dl-2.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories

# Python support added based on:
# https://github.com/jfloff/alpine-python/blob/master/recent-slim/Dockerfile

# These are always installed. Notes:
#   * dumb-init: a proper init system for containers, to reap zombie children
#   * bash: For entrypoint, and debugging
#   * ca-certificates: for SSL verification during Pip and easy_install
#   * python: the binaries themselves

RUN apk update && \
    apk add --no-cache \
    dumb-init \
    bash \
    ca-certificates \
    python3 \
    chromium \
    chromium-chromedriver \
    less \
    vim \
    curl

  # make some useful symlinks that are expected to exist
  RUN if [[ ! -e /usr/bin/python ]];        then ln -sf /usr/bin/python3 /usr/bin/python; fi \
  && if [[ ! -e /usr/bin/python-config ]]; then ln -sf /usr/bin/python-config3 /usr/bin/python-config; fi \
  && if [[ ! -e /usr/bin/idle ]];          then ln -sf /usr/bin/idle3 /usr/bin/idle; fi \
  && if [[ ! -e /usr/bin/pydoc ]];         then ln -sf /usr/bin/pydoc3 /usr/bin/pydoc; fi \
  && if [[ ! -e /usr/bin/easy_install ]];  then ln -sf $(ls /usr/bin/easy_install*) /usr/bin/easy_install; fi \
  # Install and upgrade Pip
  && easy_install pip \
  && pip install --upgrade pip \
  && if [[ ! -e /usr/bin/pip ]]; then ln -sf /usr/bin/pip3 /usr/bin/pip; fi \
  && echo

ENV DIRPATH /opt/{{ project_name }}
LABEL "application"="{{ project_name }}-testing"
RUN mkdir -p $DIRPATH/{{ project_name }}-testing

WORKDIR $DIRPATH/{{ project_name }}-testing
COPY . .

RUN pip install -U pip \
  && pip install -r requirements.txt