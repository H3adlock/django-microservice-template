.. {{ project_name }} documentation master file, created by
   sphinx-quickstart on Tue Dec 29 19:06:20 2015.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

For developers
=========================================

Installation
************

Below is description how to use it in local development, on staging environment and production.

Requirements for ElasticSerch to work.
---------------------------------------

In order to have ElasticSearch working you have to set on your host for {{ project_name }}-logs container::

  sudo sysctl -w vm.max_map_count=262144


On Ubuntu based host.
---------------------

When you will notice any network related problems (like being unable to reach internet during images building or from a built container; very slow network response within containers' network), check if in file on host machine::

  /etc/default/docker

you have uncommented::

  DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"

If you change this don't forget to restart docker-engine servie. For Ubuntu::

  sudo service docker restart

Local development
----------------- 

All what you need is to have `Docker Engine <https://docs.docker.com/>`_ and `Docker Compose <https://docs.docker.com/>`_   installed on your OS.
Current version of {{ project_name }} (1.0.1) was tested with Docker Engine 1.12.3 and Docker Compose 1.8


To build and run type::

    make

This will build your base images then with docker compose build and start all your containers.

Later on if you need only to build base images run::

    make build-base

and all needed containers to make them up and running::

    make run

* `Admin page <http://127.0.0.1/admin/>`_ 
* `Documentation <http://127.0.0.1/docs/>`_
* `Logs collector <http://127.0.0.1:5601/>`_

To verify if all is working you can run SBE tests::

    make sbe


Staging / integration environment
---------------------------------

TODO


Production
----------

TODO

Developing changes
******************

When all docker containers are up and running, what can be checked by runing::

  docker ps

You should see containers with names::
  
  {{ project_name }}-db - PostgeSQL 
  {{ project_name }}-web - Django application with gunicorn
  {{ project_name }}-https - Nginx
  {{ project_name }}-testing - Behave, Selenium, PhantomJS
  {{ project_name }}-logs - ELK stack
  {{ project_name }}-logspout - Logspout - log forwarder from Docker to Logstash 

To stop all containers::

    make stop

And start them again::

    make start

Changes in web are dynamically reloaded after each change in code.
To reload https container run::

   make reload-https

to recreate base container run::

   docker-compose down
   make clean-base
   make build-base

to reload changes in docs run::

   make build-docs

Shortcuts
*********

Makefile basicly covers all docker and docker-compose commands. Some of them can be usfeful like::

  make clean-apps

wchich stops and removes all containers and images build by docker-compose.
Additionally to clean up base images and containers run ::

  make clean-all

If you just run ::

  make

it will build and start all you need to have working {{ project_name }}.

Logs
----

Logs from django and gunicorn are stored in volume container and written to /opt/{{ project_name }}/logs/web folder. You can access them by::

    make logs-web

Logs for Nginx are stored in volume container https-logs and written to /opt/{{ project_name }}/logs/https folder.. You can access them by::

    make logs-https

Both web application's logs and Nginx' logs are transported to log collector container (ELK stack). You can analizy and watch them through `Kibana web intrface <http://127.0.0.1:5601/>`_.
Idea of delivering logs to logs collector is to have volume container for each application which logs should be transmited to logs collector. Application is writing the logs to that container in the same tame the logs are delivered to stdout to transfer them to docker. From docker logs are shipped to Logstash with Logspout containter.



Docker shell
------------

To easily open shell for conteiners you can use::

    make shell-web
    make shell-https
    make shell-testing
    make shell-db
    make shell-logs



Testing
*******

BDD / SBE
---------

BDD is done with `behave <http://pythonhosted.org/behave/>`_. Steps should use only exposed REST API to make it technology agnostic.

To run SBE tests ::

    make sbe


Unit testing
------------

When you run ::

    make test

then the standard Django mechanism for testing will be fired inside your docker images. 

Production
**********

to run on production use command::

    make run-prod

Documentation
*************

Generated by `Sphinx <http://sphinx-doc.org/>`_ with useg of `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_.

If you change documentation (docs/source folder) you can rebuild it in container by ::

  make build-docs


.. toctree::
   :maxdepth: 2



